#include "s21_matrix.h"
#include <check.h>

#test check_is_equal_double

  double eps_1 = 1e-9d;
  double eps_2 = 1e-5d;
  //double delta_eps = 1;

  for (double x = 1.0d; x <= 2.0d; x += 1e-3d) {
    ck_assert_int_eq(1, s21_is_eq_double(x, x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x - eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(x, x - eps_1));

    ck_assert_int_eq(0, s21_is_eq_double(x, x + eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(x, x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x + eps_2)); 
  }
  
  eps_1 *= 10.0d;
  eps_2 *= 10.0d;
  for (double x = 10.0d; x <= 19.0d; x += 1e-2d) {
  
    ck_assert_int_eq(1, s21_is_eq_double(x, x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x - eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(x, x - eps_1));

    ck_assert_int_eq(0, s21_is_eq_double(x, x + eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(x, x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x + eps_2));

  }

  eps_1 *= 10.0d;
  eps_2 *= 10.0d;
  for (double x = 100.0d; x <= 199.0d; x += 1e-1d) {
  
    ck_assert_int_eq(1, s21_is_eq_double(x, x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x - eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(x, x - eps_1));

    ck_assert_int_eq(0, s21_is_eq_double(x, x + eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(x, x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x + eps_2));

  }

  eps_1 *= 10.0d;
  eps_2 *= 10.0d;
  for (double x = 1000.0d; x <= 1999.0d; x += 1e-0d) {
  
    ck_assert_int_eq(1, s21_is_eq_double(x, x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x + eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(-x, -x - eps_1));
    ck_assert_int_eq(1, s21_is_eq_double(x, x - eps_1));

    ck_assert_int_eq(0, s21_is_eq_double(x, x + eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(x, x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x - eps_2));
    ck_assert_int_eq(0, s21_is_eq_double(-x, -x + eps_2));

  }


#test math_module

  double delta = 1e-5;
  for (double x = 0.0d; x <= 9.0d; x += 1e-2d) {
  
     ck_assert_int_eq(1, s21_is_eq_double(x, s21_dabs(x)));
     ck_assert_int_eq(1, s21_is_eq_double(x, s21_dabs(-x)));
     ck_assert_int_eq(1, s21_is_eq_double(x, s21_dmin(x, x + delta)));
     ck_assert_int_eq(1, s21_is_eq_double(x - delta, s21_dmin(x, x - delta)));
     ck_assert_int_eq(1, s21_is_eq_double(-x, s21_dmin(-x, x + delta)));
     ck_assert_int_eq(1, s21_is_eq_double(-x, s21_dmin(-x, -x + delta)));
     ck_assert_int_eq(1, s21_is_eq_double(-x -delta, s21_dmin(-x, -x - delta)));
  }


  for (double x = 10.0d; x <= 99.0d; x += 1e-1d) {
  
     ck_assert_int_eq(1, s21_is_eq_double(x, s21_dabs(x)));
     ck_assert_int_eq(1, s21_is_eq_double(x, s21_dabs(-x)));
     ck_assert_int_eq(1, s21_is_eq_double(x, s21_dmin(x, x + delta)));
     ck_assert_int_eq(1, s21_is_eq_double(x - delta, s21_dmin(x, x - delta)));
     ck_assert_int_eq(1, s21_is_eq_double(-x, s21_dmin(-x, x + delta)));
     ck_assert_int_eq(1, s21_is_eq_double(-x, s21_dmin(-x, -x + delta)));
     ck_assert_int_eq(1, s21_is_eq_double(-x -delta, s21_dmin(-x, -x - delta)));
  }

#test create_remove_module

  matrix_t A = {NULL, 0, 0,};

  ck_assert_int_eq(INCORRECT_MATRIX, s21_create_matrix(1, 1, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_create_matrix(0, 1, &A));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_create_matrix(-1, -1, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_create_matrix(5, -10, &A));

  ck_assert_int_eq(OK, s21_create_matrix(1,1, &A));
  
  ck_assert_int_eq(1, A.rows);
  ck_assert_int_eq(1, A.columns);

  s21_reinitialization(2, 3, &A);

  ck_assert_int_eq(2, A.rows);
  ck_assert_int_eq(3, A.columns);
  s21_remove_matrix(&A);

#test eq_matrix_module

  matrix_t A = {NULL, 0, 0};
  matrix_t B = {NULL, 0, 0};
  matrix_t C = A;

  ck_assert_int_eq(FAILURE, s21_eq_matrix(&A, NULL));
  ck_assert_int_eq(FAILURE, s21_eq_matrix(&A, &B));
  ck_assert_int_eq(FAILURE, s21_eq_matrix(NULL, NULL));
  ck_assert_int_eq(FAILURE, s21_eq_matrix(NULL, &B));

  s21_create_matrix(2, 2, &A);
  s21_create_matrix(2, 2, &B);
  s21_create_matrix(2, 1, &C);


  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&A, &B));
  ck_assert_int_eq(FAILURE, s21_eq_matrix(&A, &C));
  ck_assert_int_eq(FAILURE, s21_eq_matrix(&B, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&A, &A));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &C));

  A.matrix[1][1] = 1e-5;

  ck_assert_int_eq(FAILURE, s21_eq_matrix(&A, &B));


  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);


#test sum_and_sub_module

  matrix_t A = {NULL, 0, 0};
  matrix_t B = {NULL, 0, 0};
  matrix_t result = A;
  matrix_t C = A;

  ck_assert_int_eq(INCORRECT_MATRIX, s21_sum_matrix(NULL, NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_sub_matrix(NULL, NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_sum_matrix(&A, &B, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_sub_matrix(&A, &B, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_sum_matrix(&A, NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_sub_matrix(&A, NULL, NULL));


  ck_assert_int_eq(INCORRECT_MATRIX, s21_sum_matrix(&A, &B, &C));
  s21_remove_matrix(&C);
  ck_assert_int_eq(INCORRECT_MATRIX, s21_sub_matrix(&A, &B, &C));
  s21_remove_matrix(&C);

  s21_reinitialization(1, 1, &A);
  s21_reinitialization(2, 2, &B);
  
  ck_assert_int_eq(CALC_ERROR, s21_sum_matrix(&A, &B, &C));
  s21_remove_matrix(&C);
  ck_assert_int_eq(CALC_ERROR, s21_sub_matrix(&A, &B, &C));
  s21_remove_matrix(&C);

  s21_reinitialization(2, 2, &A);
  s21_reinitialization(2, 2, &result);

  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 1.0d;
  A.matrix[1][0] = 1.0d;
  A.matrix[1][1] = 1.0d;

  B.matrix[0][0] = 1.1d;
  B.matrix[0][1] = 1e-16d;
  B.matrix[1][0] = 1e+5d;
  B.matrix[1][1] = 123.456d;

  result.matrix[0][0] = 2.1d;
  result.matrix[0][1] = 1.0d + 1e-16d;
  result.matrix[1][0] = 1.0d + 1e+5d;
  result.matrix[1][1] = 124.456d;

  ck_assert_int_eq(OK, s21_sum_matrix(&A, &B, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &result));
  s21_remove_matrix(&C);

  result.matrix[0][0] = -0.1d;
  result.matrix[0][1] = 1.0d - 1e-16d;
  result.matrix[1][0] = 1.0d - 1e+5d;
  result.matrix[1][1] = -122.456d;

  ck_assert_int_eq(OK, s21_sub_matrix(&A, &B, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &result));


  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  s21_remove_matrix(&result);


#test mult_module

  matrix_t A = {NULL, 0, 0};
  matrix_t B = A;
  double numb = 0.0;
  matrix_t result = A;
  matrix_t C = A;

  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_matrix(NULL, NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_number(NULL, numb, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_matrix(&A, &B, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_number(&A, numb, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_matrix(&A, NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_number(&A, numb, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_matrix(&A, &B, &C));
  s21_remove_matrix(&C);
  ck_assert_int_eq(INCORRECT_MATRIX, s21_mult_number(&A, numb, &C));
  s21_remove_matrix(&C);

  s21_reinitialization(1, 1, &A);
  s21_reinitialization(2, 2, &B);
  
  ck_assert_int_eq(CALC_ERROR, s21_mult_matrix(&A, &B, &C));
  s21_remove_matrix(&C);

  s21_reinitialization(2, 2, &A);
  s21_reinitialization(2, 2, &result);

  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 1.0d;
  A.matrix[1][0] = 1.0d;
  A.matrix[1][1] = -1.0d;

  B.matrix[0][0] = 10.0d;
  B.matrix[0][1] = 0.01d;
  B.matrix[1][0] = 1.1d;
  B.matrix[1][1] = 12.34d;

  result.matrix[0][0] = 11.1d;
  result.matrix[0][1] = 12.35d;
  result.matrix[1][0] = 8.9d;
  result.matrix[1][1] = -12.33d;

  ck_assert_int_eq(OK, s21_mult_matrix(&A, &B, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &result));
  s21_remove_matrix(&C);

  numb = 2.0;

  result.matrix[0][0] = 2.0d;
  result.matrix[0][1] = 2.0d;
  result.matrix[1][0] = 2.0d;
  result.matrix[1][1] = -2.0d;

  ck_assert_int_eq(OK, s21_mult_number(&A, numb, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &result));
  s21_remove_matrix(&C);

  numb = 0.5;

  result.matrix[0][0] = 5.0d;
  result.matrix[0][1] = 0.005d;
  result.matrix[1][0] = 0.55d;
  result.matrix[1][1] = 6.17d;

  ck_assert_int_eq(OK, s21_mult_number(&B, numb, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &result));
  s21_remove_matrix(&C);

  s21_reinitialization(2, 3, &A);
  s21_reinitialization(3, 1, &B);
  s21_reinitialization(2, 1, &result);


  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 1.0d;
  A.matrix[0][2] = -1.0d;
  A.matrix[1][0] = 1.0d;
  A.matrix[1][1] = -1.0d;
  A.matrix[1][2] = 1.0d;


  B.matrix[0][0] = 12.1d;
  B.matrix[1][0] = 5.0d;
  B.matrix[2][0] = 0.01d;

  result.matrix[0][0] = 17.09d;
  result.matrix[1][0] = 7.11d;

  ck_assert_int_eq(OK, s21_mult_matrix(&A, &B, &C));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &result));


  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  s21_remove_matrix(&result);



#test transpose_module

  matrix_t A = {NULL, 0, 0};
  matrix_t B = A;
  matrix_t result = A;

  ck_assert_int_eq(INCORRECT_MATRIX, s21_transpose(NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_transpose(&A, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_transpose(&A, &B));
  s21_remove_matrix(&B);

  s21_reinitialization(1, 4, &A);
  s21_reinitialization(4, 1, &result);

  A.matrix[0][0] = -1.0d;
  A.matrix[0][1] = 5.55e-22d;
  A.matrix[0][2] = 123.4d;
  A.matrix[0][3] = -0.00056d;

  result.matrix[0][0] = -1.0d;
  result.matrix[1][0] = 5.55e-22d;
  result.matrix[2][0] = 123.4d;
  result.matrix[3][0] = -0.00056d;

  ck_assert_int_eq(OK, s21_transpose(&A, &B));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&B, &result));
  s21_remove_matrix(&B);

  s21_reinitialization(2, 2, &A);
  s21_reinitialization(2, 2, &result);

  A.matrix[0][0] = -1.0d;
  A.matrix[0][1] = 5.55e-22d;
  A.matrix[1][0] = 123.4d;
  A.matrix[1][1] = -0.00056d;

  result.matrix[0][0] = -1.0d;
  result.matrix[0][1] = 123.4d;
  result.matrix[1][0] = 5.55e-22d;
  result.matrix[1][1] = -0.00056d;

  ck_assert_int_eq(OK, s21_transpose(&A, &B));
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&B, &result));

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test inverse_module

  matrix_t A = {NULL, 0, 0};
  matrix_t B = A;
  matrix_t C = A;
  matrix_t unit = A;

  ck_assert_int_eq(INCORRECT_MATRIX, s21_inverse_matrix(NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_inverse_matrix(&A, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_inverse_matrix(&A, &B));
  s21_remove_matrix(&B);

  s21_reinitialization(1, 4, &A);
  ck_assert_int_eq(CALC_ERROR, s21_inverse_matrix(&A, &B));
  s21_remove_matrix(&B);

  s21_reinitialization(2, 2, &A);

  A.matrix[0][0] = 1.1d;
  A.matrix[0][1] = 1.1d;
  A.matrix[1][0] = 1.1d;
  A.matrix[1][1] = 1.1d;

  ck_assert_int_eq(CALC_ERROR, s21_inverse_matrix(&A, &B));
  s21_remove_matrix(&B);


  s21_reinitialization(2, 2, &A);
  s21_reinitialization(2, 2, &unit);

  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 2.0d;
  A.matrix[1][0] = 3.0d;
  A.matrix[1][1] = 4.0d;

  unit.matrix[0][0] = 1.0d;
  unit.matrix[0][1] = 0.0d;
  unit.matrix[1][0] = 0.0d;
  unit.matrix[1][1] = 1.0d;

  ck_assert_int_eq(OK, s21_inverse_matrix(&A, &B));
  s21_mult_matrix(&A, &B, &C);
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &unit));
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);

  s21_reinitialization(3, 3, &A);
  s21_reinitialization(3, 3, &unit);

  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 2.0d;
  A.matrix[0][2] = 1.1d;
  A.matrix[1][0] = 3.0d;
  A.matrix[1][1] = 4.5d;
  A.matrix[1][2] = 6.7d;
  A.matrix[2][0] = 8.9d;
  A.matrix[2][1] = -4.0d;
  A.matrix[2][2] = -1.11d;

  unit.matrix[0][0] = 1.0d;
  unit.matrix[0][1] = 0.0d;
  unit.matrix[0][2] = 0.0d;
  unit.matrix[1][0] = 0.0d;
  unit.matrix[1][1] = 1.0d;
  unit.matrix[1][2] = 0.0d;
  unit.matrix[2][0] = 0.0d;
  unit.matrix[2][1] = 0.0d;
  unit.matrix[2][2] = 1.0d;

  ck_assert_int_eq(OK, s21_inverse_matrix(&A, &B));
  s21_mult_matrix(&A, &B, &C);
  ck_assert_int_eq(SUCCESS, s21_eq_matrix(&C, &unit));

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&C);
  s21_remove_matrix(&unit);

#test determinant_module

  matrix_t A = {NULL, 0, 0};
  double result = 0;
  double detA = 0;

  ck_assert_int_eq(INCORRECT_MATRIX, s21_determinant(NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_determinant(NULL, &detA));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_determinant(&A, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_determinant(&A, &detA));

  s21_reinitialization(1, 1, &A);
  A.matrix[0][0] = 123.456d;
  result = A.matrix[0][0];

  ck_assert_int_eq(OK, s21_determinant(&A, &detA));
  ck_assert_int_eq(1, s21_is_eq_double(result, detA));


  s21_reinitialization(2, 2, &A);
  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 2.0d;
  A.matrix[1][0] = 3.0d;
  A.matrix[1][1] = 4.0d;
  result = -2.0d;

  ck_assert_int_eq(OK, s21_determinant(&A, &detA));
  ck_assert_int_eq(1, s21_is_eq_double(result, detA));


  s21_reinitialization(3, 3, &A);
  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 2.0d;
  A.matrix[0][2] = 3.0d;
  A.matrix[1][0] = 4.0d;
  A.matrix[1][1] = 1.0d;
  A.matrix[1][2] = 2.0d;
  A.matrix[2][0] = 3.0d;
  A.matrix[2][1] = 4.0d;
  A.matrix[2][2] = 4.0d;

  result = 15.0d;

  ck_assert_int_eq(OK, s21_determinant(&A, &detA));
  ck_assert_int_eq(1, s21_is_eq_double(result, detA));
  s21_reinitialization(4, 4, &A);
  A.matrix[0][0] = 1.0d;
  A.matrix[0][1] = 2.0d;
  A.matrix[0][2] = 3.0d;
  A.matrix[0][3] = 4.0d;
  A.matrix[1][0] = 5.0d;
  A.matrix[1][1] = 6.0d;
  A.matrix[1][2] = 7.0d;
  A.matrix[1][3] = 9.0d;
  A.matrix[2][0] = 3.0d;
  A.matrix[2][1] = 2.0d;
  A.matrix[2][2] = 1.0d;
  A.matrix[2][3] = 0.0d;
  A.matrix[3][0] = 8.0d;
  A.matrix[3][1] = 7.0d;
  A.matrix[3][2] = 9.0d;
  A.matrix[3][3] = 0.0d;

  result = -12.0d;

  ck_assert_int_eq(OK, s21_determinant(&A, &detA));
  ck_assert_int_eq(1, s21_is_eq_double(result, detA));

  s21_remove_matrix(&A);


#test calc_complements_module

  matrix_t A = {NULL, 0, 0};
  matrix_t B = A;
  matrix_t result = A;

  ck_assert_int_eq(INCORRECT_MATRIX, s21_calc_complements(NULL, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_calc_complements(&A, NULL));
  ck_assert_int_eq(INCORRECT_MATRIX, s21_calc_complements(&A, &result));
  s21_remove_matrix(&result);
  ck_assert_int_eq(INCORRECT_MATRIX, s21_calc_complements(NULL, &result));

  s21_reinitialization(1, 2, &A);

  ck_assert_int_eq(CALC_ERROR, s21_calc_complements(&A, &B));
  s21_remove_matrix(&B);

  s21_reinitialization(1, 1, &A);
  s21_reinitialization(1, 1, &result);

  A.matrix[0][0] = 2.0d;
  result.matrix[0][0] = 1.0d;

  ck_assert_int_eq(OK, s21_calc_complements(&A, &B));
  ck_assert_int_eq(1, s21_eq_matrix(&B, &result));

  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);










